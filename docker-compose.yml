services:
  # Thewavess AI Core API
  api:
    build: .
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - GO_ENV=development
      - PORT=8080
      # Database Configuration
      - DB_USER=thewavess
      - DB_PASSWORD=password
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=thewavess_ai_core
      - DB_SSLMODE=disable
      # Redis Configuration  
      - REDIS_URL=redis://redis:6379/0
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-800}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.8}
      - OPENAI_API_URL=${OPENAI_API_URL:-https://api.openai.com/v1}
      # Grok Configuration
      - GROK_API_KEY=${GROK_API_KEY:-}
      - GROK_MODEL=${GROK_MODEL:-grok-beta}
      - GROK_MAX_TOKENS=${GROK_MAX_TOKENS:-1000}
      - GROK_API_URL=${GROK_API_URL:-https://api.x.ai/v1}
      # Security
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS:-GET,POST,PUT,PATCH,DELETE,HEAD,OPTIONS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS:-Origin,Content-Length,Content-Type,Authorization,X-Requested-With,Accept,Accept-Encoding,Accept-Language,Connection,Host,User-Agent}
      - CORS_EXPOSED_HEADERS=${CORS_EXPOSED_HEADERS:-}
      # TTS (Optional)
      - TTS_API_KEY=${TTS_API_KEY:-}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=thewavess_ai_core
      - POSTGRES_USER=thewavess
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U thewavess"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
